blueprint:
  name: Leak Low Battery Annoucement
  description: |
    Announce when a leak sensor has a low battery.
  domain: automation
  source_url: https://github.com/alexyao2015/homeassistantYAML/blob/master/blueprints/leak_annoucement_battery.yaml
  input:
    input_leak_sensor_battery:
      name: Leak Sensor Battery
      description: The leak sensor battery sensor to watch for low battery.
      selector:
        entity:
          filter:
            domain: sensor
            device_class: battery
    input_leak_sensor_battery_low_level:
      name: Leak Sensor Battery Low Level
      description: The percentage that the battery drops below to consider low and announce.
      default: "10"
      selector:
        number:
          max: 100
          min: 1
    input_announcement_count:
      name: Announcement Count
      description: Number of times to announce a the battery is low
      default: "10"
      selector:
        number:
          min: 1
          max: 1000
          mode: box
    input_announcement_delay:
      name: Announcement Delay
      description: Delay between each announcement
      default:
        hours: 0
        minutes: 10
        seconds: 0
      selector:
        duration:
mode: restart

trigger_variables:
  leak_sensor_battery: !input input_leak_sensor_battery
  leak_sensor_battery_low_level_str: !input input_leak_sensor_battery_low_level
  leak_sensor_battery_low_level: "{{ leak_sensor_battery_low_level_str | int }}"
trigger:
  - platform: template
    value_template: "{{ (states(leak_sensor_battery) | int) < leak_sensor_battery_low_level }}"

variables:
  leak_sensor_battery_low_level_str: !input input_leak_sensor_battery_low_level
  announcement_count_str: !input input_announcement_count
  announcement_delay: !input input_announcement_delay

  leak_sensor_battery_low_level: "{{ leak_sensor_battery_low_level_str | int }}"
  announcement_count: "{{ announcement_count_str | int }}"
  trigger_entity_id: "{{ trigger.entity_id }}"
  trigger_entity_name: "{{ trigger.to_state.attributes.friendly_name }}"

action:
  - repeat:
      until:
        - condition: or
          conditions:
            - condition: template
              value_template: "{{ repeat.index >= announcement_count }}"
            - condition: template
              value_template: '{{ (states(leak_sensor_battery) | int) > leak_sensor_battery_low_level }}'
      sequence:
        - service: script.turn_on
          data:
            variables:
              message: >-
                The battery for {{ trigger_entity_name }} sensor is low.
                It is currently at {{ states(leak_sensor_battery) }} percent.
          target:
            entity_id: script.notify_everywhere
        - delay: "{{ announcement_delay }}"
