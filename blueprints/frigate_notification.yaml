blueprint:
  name: Frigate Notification
  description: |
    ## This is a fork of hunterjm's blueprint originally located at https://gist.github.com/hunterjm/23c1588a9f2b8b9c2a62ffc364e17f8c

    ## Frigate Mobile App Notification
    This blueprint will send a notification to your device when a Frigate event for the selected camera is fired. The notification will initially include the thumbnail of the detection, but will update to include actionable notifications allowing you to view the saved clip/snapshot when available, or silence the notification for a configurable amount of time.
    With this blueprint, you may send the notification to multiple devices by leaving "Device" blank and instead use a [notification group][1].
    ### Required entities:
      - Frigate Camera Name
      - Mobile App Device **or** the name of a Notification Group
    ### Optional features:
      - You can limit notifications to objects entering **any** pre-defined [zones][2] in Frigate.
      - You can specify which [zones][2] to be notified about. This must be a list (e.g.):
        ```yaml
        - backyard
        ```
      - You can specify what type of [objects][3] to be notified about. This must be a list (e.g.):
        ```yaml
        - person
        - car
        ```
      - You can disable notifications if a presence entity or group is "home".\
      - You can silence future notifications for a defined amount of time through actionable notifications. This is helpful in situations where you know you will be triggering detections for an extended period of time, like when the kids are playing outside.
    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
    [2]: https://blakeblackshear.github.io/frigate/configuration/cameras#zones
    [3]: https://blakeblackshear.github.io/frigate/configuration/objects
  domain: automation
  source_url: https://github.com/alexyao2015/homeassistantYAML/blob/master/blueprints/frigate_notification.yaml
  input:
    input_camera:
      name: Frigate Camera
      description: The name of the camera as defined in your frigate configuration.
      selector:
        entity:
          filter:
            domain: camera
    input_base_url:
      name: (Optional) Base URL
      description: >
        The external url for your Home Assistant instance. This will default to a relative
        URL and will open the clips in the app instead of the browser, which may cause issues
        on some devices.
      default: ""
    input_zones:
      name: (Optional) Trigger Zones
      description: If specificed, only notify if object has entered a defined zone. Provide as a list (-) of zones you wish to recieve notifications for.
      default: []
      selector:
        object:
    input_trigger_objects:
      name: (Optional) Trigger Objects
      description: A list (-) of objects you wish to recieve notifications for.
      default: []
      selector:
        object:
    input_presence_entity:
      name: (Optional) Presence Entity
      description: Only notify if selected presence entity is not "home".
      default: ""
      selector:
        entity:

    input_integrated_notification:
      name: (Optional) Integrated Web UI Notifications
      description: Show notification in Web UI (must have automation to clear old notifications installed)
      default: false
      selector:
        boolean:
    input_integrated_notification_keep_days:
      name: (Optional) Days to keep integrated notifications
      description: Number of days to keep the integrated notifications before pruning.
      default: 1
      selector:
        number:
          min: 0
          max: 365
          unit_of_measurement: days
    input_signal_service:
      name: (Optional) Signal Service
      description: The service to use for sending a notification using Signal Messenger.
      default: ""

    input_enable_time_condition:
      name: (Optional) Enable Time Condition
      description: Enable the time condition to only run the automation when the time is between the start and end times.
      default: false
      selector:
        boolean:
    input_time_condition_start:
      name: (Optional) Time Condition Start
      description: The start time for the time condition.
      default: "8:00:00"
      selector:
        time:
    input_time_condition_end:
      name: (Optional) Time Condition End
      description: The end time for the time condition.
      default: "22:00:00"
      selector:
        time:

    input_tts_service:
      name: (Optional) TTS Service
      description: >
        The service name to use for sending a notification using TTS.
        One of https://github.com/nimroddolev/chime_tts/wiki/chime_tts.say#tts_platform
      default: ""
    input_tts_volume_level:
      name: (Optional) TTS Volume Level
      description: The volume to play TTS at.
      default: 1
      selector:
        number:
          min: 0
          max: 1
          step: 0.05
    input_media_player_tts:
      name: (Optional) Media Players to use for TTS
      description: A list (-) of media players you wish to use for TTS, including media_player.
      default: []
      selector:
        entity:
          filter:
            domain: "media_player"
          multiple: true

    input_android_tv_services:
      name: (Optional) Android TV Services
      description: A list (-) of TV Notifications for Android TV service names. (e.g. notify.my_android_tv)
      default: []
      selector: 
        object: 

mode: parallel
max: 10

trigger_variables:
  camera: !input input_camera
trigger:
  platform: mqtt
  topic: frigate/events
  payload: |
    {{ camera ~ "`;`new"}}
  value_template: |
    {{ value_json['after']['camera'] ~ "`;`" ~ value_json['type'] }}

variables:
  base_url: !input input_base_url
  input_zones: !input input_zones
  input_trigger_objects: !input input_trigger_objects
  presence_entity: !input input_presence_entity
  integrated_notification: !input input_integrated_notification
  keep_days: !input input_integrated_notification_keep_days
  signal_service: !input input_signal_service
  enable_time_condition: !input input_enable_time_condition

  tts_service: !input input_tts_service
  tts_volume_level: !input input_tts_volume_level
  media_player_tts: !input input_media_player_tts

  android_tv_services: !input input_android_tv_services

  camera_name: "{{ trigger.payload_json['after']['camera'] | replace('_', ' ') | title }}"
  id: "{{ trigger.payload_json['after']['id'] }}"

  zones: "{{ input_zones | list }}"
  trigger_objects: "{{ input_trigger_objects | list }}"

condition:
  # - "{{ trigger.payload_json['type'] == 'new' }}"
  - "{{ not presence_entity or not is_state(presence_entity, 'home') }}"
  - condition: or
    conditions:
      - "{{ not enable_time_condition }}"
      - condition: time
        before: !input input_time_condition_end
        after: !input input_time_condition_start
action:
  # initially send notification immediately after event is triggered
  - repeat:
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ repeat.index == 1 }}"
              sequence:
                # generate variables for the if condition
                - variables:
                    entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
                    object: "{{ trigger.payload_json['after']['label'] }}"
                # if the initial trigger wasn't in zone, wait for another trigger
                - condition: or
                  conditions:
                    - condition: template
                      value_template: "{{ not (not zones|length or zones|select('in', entered_zones)|list|length > 0) }}"
                    - condition: template
                      value_template: "{{ not (not trigger_objects|length or object in trigger_objects) }}"
                - wait_for_trigger:
                    - platform: mqtt
                      topic: frigate/events
                      payload: "{{ id }}"
                      value_template: "{{ value_json['after']['id'] }}"
                  timeout:
                    minutes: 2
                  continue_on_timeout: false
          default:
            - wait_for_trigger:
                - platform: mqtt
                  topic: frigate/events
                  payload: "{{ id }}"
                  value_template: "{{ value_json['after']['id'] }}"
              timeout:
                minutes: 2
              continue_on_timeout: false
        - variables:
            repeat_trigger: "{{ wait.trigger if wait is defined else trigger }}"
            entered_zones: "{{ repeat_trigger.payload_json['after']['entered_zones'] }}"
            object: "{{ repeat_trigger.payload_json['after']['label'] }}"
            label: "{{ object | title }}"
            detection_score: "{{ repeat_trigger.payload_json['after']['top_score'] }}"
        - condition: template
          value_template: |
            {{ not zones|length or zones|select('in', entered_zones)|list|length > 0 }}
        - condition: template
          value_template: |
            {{ not trigger_objects|length or object in trigger_objects }}
        - parallel:
            # web UI
            - choose:
                - conditions: "{{ integrated_notification }}"
                  sequence:
                    - service: persistent_notification.create
                      data:
                        title: "A {{ label }} was detected on the {{ camera_name }} camera."
                        message: "![image]({{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg)"
                        notification_id: "frigate_{{ id }}"
                    - service: persistent_notification_prune.dismiss_old_notifications
                      data:
                        keep_days: "{{ keep_days }}"
                        notification_id_filter: frigate_
            # TTS
            - choose:
                - conditions: "{{ media_player_tts|length > 0 and not not tts_service }}"
                  sequence:
                    - service: script.turn_on
                      target:
                        entity_id: script.play_tts_at_volume
                      data:
                        variables:
                          media_player: "{{ media_player_tts }}"
                          volume_level: "{{ tts_volume_level }}"
                          tts_service: "{{ tts_service }}"
                          message: "A {{ label }} was detected on the {{ camera_name }} camera."
            # Android tv notification
            - choose:
                - conditions: "{{ android_tv_services|length > 0 }}"
                  sequence:
                    - service: python_script.send_android_tv_notifications
                      data:
                        services: "{{ android_tv_services }}"
                        title: Security Alert
                        message: "A {{ label }} was detected on the {{ camera_name }} camera."
                        image_url: "{{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg"
            # Signal Notification pre event
            - choose:
                - conditions: "{{ not not signal_service }}"
                  sequence:
                    - service: "notify.{{ signal_service }}"
                      data:
                        message: "1. A {{ label }} was detected on the {{ camera_name }} camera with a score of {{ detection_score }}."
                        data:
                          urls:
                            - "{{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg"
        - condition: template
          value_template: "{{ repeat_trigger.payload_json['type'] == 'end' }}"
        - stop: "Event ended on first trigger"
          error: true
      until:
        # stop when the event ends or if the event triggered a notification
        - or:
            - condition: template
              value_template: |
                  {% set repeat_trigger = wait.trigger if wait is defined else trigger %}
                  {{ repeat_trigger.payload_json['type'] == 'end' }}
            # have to repeat conditions because script variables except for wait and trigger
            # can't be accessed in the until condition
            - and:
              - condition: template
                value_template: |
                  {% set repeat_trigger = wait.trigger if wait is defined else trigger %}
                  {% set entered_zones = repeat_trigger.payload_json['after']['entered_zones'] %}
                  {{ not zones|length or zones|select('in', entered_zones)|list|length > 0 }}
              - condition: template
                value_template: |
                  {% set repeat_trigger = wait.trigger if wait is defined else trigger %}
                  {% set object = repeat_trigger.payload_json['after']['label'] %}
                  {{ not trigger_objects|length or object in trigger_objects }}

  - repeat:
      sequence:
        - wait_for_trigger:
            - platform: mqtt
              topic: frigate/events
              payload: "{{ id }}"
              value_template: "{{ value_json['after']['id'] }}"
          timeout:
            minutes: 2
          continue_on_timeout: false
        - variables:
            entered_zones: "{{ wait.trigger.payload_json['after']['entered_zones'] }}"
            object: "{{ wait.trigger.payload_json['after']['label'] }}"
            label: "{{ object | title }}"
            detection_score: "{{ wait.trigger.payload_json['after']['top_score'] }}"
        - condition: template
          value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
        - condition: template
          value_template: "{{ not zones|length or zones|select('in', entered_zones)|list|length > 0 }}"
        - condition: template
          value_template: "{{ not trigger_objects|length or object in trigger_objects }}"
        - parallel:
            # Send web UI notification
            - choose:
                - conditions: "{{ integrated_notification }}" # web UI
                  sequence:
                    - service: persistent_notification.create
                      data:
                        title: "A {{ label }} was detected on the {{ camera_name }} camera."
                        message: >
                          <a href="{{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4" target="_blank">Click to View the Clip</a>
                          ![image]({{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg)
                        notification_id: "frigate_{{ id }}"
                    - service: persistent_notification_prune.dismiss_old_notifications
                      data:
                        keep_days: "{{ keep_days }}"
                        notification_id_filter: frigate_
            # Signal Notification
            - choose:
                - conditions: "{{ not not signal_service }}"
                  sequence:
                    - service: "notify.{{ signal_service }}"
                      data:
                        message: >
                          2. A {{ label }} was detected on the {{ camera_name }} camera with a score of {{ detection_score }}.
                          {{base_url}}/api/frigate/notifications/{{id}}/{{camera}}/clip.mp4
                        data:
                          urls:
                            - "{{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg"
            # Android tv notification
            - choose:
                - conditions: "{{ android_tv_services|length > 0 }}"
                  sequence:
                    - service: python_script.send_android_tv_notifications
                      data:
                        services: "{{ android_tv_services }}"
                        title: Security Alert
                        message: "A {{ label }} was detected on the {{ camera_name }} camera."
                        image_url: "{{base_url}}/api/frigate/notifications/{{id}}/snapshot.jpg"
      until:
        - condition: template
          value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
